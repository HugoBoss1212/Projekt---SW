
Projekt - SW.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001ae  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000002  00800060  000001ae  00000242  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800062  00800062  00000244  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000244  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000274  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  000002b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000075a  00000000  00000000  000002e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000060e  00000000  00000000  00000a3a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000310  00000000  00000000  00001048  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000054  00000000  00000000  00001358  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000365  00000000  00000000  000013ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000f5  00000000  00000000  00001711  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  00001806  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee ea       	ldi	r30, 0xAE	; 174
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 36       	cpi	r26, 0x62	; 98
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 e6       	ldi	r26, 0x62	; 98
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a6 36       	cpi	r26, 0x66	; 102
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 8e 00 	call	0x11c	; 0x11c <main>
  8a:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <obsluga_delay>:
		}
    }
}


void obsluga_delay( uint16_t ms, uint8_t *mode) {
  92:	fb 01       	movw	r30, r22
	while( ms-- ) {
  94:	00 97       	sbiw	r24, 0x00	; 0
  96:	09 f4       	brne	.+2      	; 0x9a <obsluga_delay+0x8>
  98:	40 c0       	rjmp	.+128    	; 0x11a <obsluga_delay+0x88>
		if( !key_lock1 && !(PINA & KEY_NEXT) ) {
			key_lock1 = 500;
  9a:	44 ef       	ldi	r20, 0xF4	; 244
  9c:	51 e0       	ldi	r21, 0x01	; 1
			*mode += 1;
			if(*mode > 4){ *mode = 4; }
  9e:	64 e0       	ldi	r22, 0x04	; 4
}


void obsluga_delay( uint16_t ms, uint8_t *mode) {
	while( ms-- ) {
		if( !key_lock1 && !(PINA & KEY_NEXT) ) {
  a0:	20 91 64 00 	lds	r18, 0x0064	; 0x800064 <key_lock1>
  a4:	30 91 65 00 	lds	r19, 0x0065	; 0x800065 <key_lock1+0x1>
  a8:	21 15       	cp	r18, r1
  aa:	31 05       	cpc	r19, r1
  ac:	71 f4       	brne	.+28     	; 0xca <obsluga_delay+0x38>
  ae:	c8 99       	sbic	0x19, 0	; 25
  b0:	14 c0       	rjmp	.+40     	; 0xda <obsluga_delay+0x48>
			key_lock1 = 500;
  b2:	50 93 65 00 	sts	0x0065, r21	; 0x800065 <key_lock1+0x1>
  b6:	40 93 64 00 	sts	0x0064, r20	; 0x800064 <key_lock1>
			*mode += 1;
  ba:	20 81       	ld	r18, Z
  bc:	2f 5f       	subi	r18, 0xFF	; 255
			if(*mode > 4){ *mode = 4; }
  be:	25 30       	cpi	r18, 0x05	; 5
  c0:	10 f4       	brcc	.+4      	; 0xc6 <obsluga_delay+0x34>

void obsluga_delay( uint16_t ms, uint8_t *mode) {
	while( ms-- ) {
		if( !key_lock1 && !(PINA & KEY_NEXT) ) {
			key_lock1 = 500;
			*mode += 1;
  c2:	20 83       	st	Z, r18
  c4:	0a c0       	rjmp	.+20     	; 0xda <obsluga_delay+0x48>
			if(*mode > 4){ *mode = 4; }
  c6:	60 83       	st	Z, r22
  c8:	08 c0       	rjmp	.+16     	; 0xda <obsluga_delay+0x48>
		} else if( key_lock1 && (PINA & KEY_NEXT) ) key_lock1--;
  ca:	c8 9b       	sbis	0x19, 0	; 25
  cc:	06 c0       	rjmp	.+12     	; 0xda <obsluga_delay+0x48>
  ce:	21 50       	subi	r18, 0x01	; 1
  d0:	31 09       	sbc	r19, r1
  d2:	30 93 65 00 	sts	0x0065, r19	; 0x800065 <key_lock1+0x1>
  d6:	20 93 64 00 	sts	0x0064, r18	; 0x800064 <key_lock1>

		if( !key_lock2 && !(PINA & KEY_PREVIOUS) ) {
  da:	20 91 62 00 	lds	r18, 0x0062	; 0x800062 <__data_end>
  de:	30 91 63 00 	lds	r19, 0x0063	; 0x800063 <__data_end+0x1>
  e2:	21 15       	cp	r18, r1
  e4:	31 05       	cpc	r19, r1
  e6:	51 f4       	brne	.+20     	; 0xfc <obsluga_delay+0x6a>
  e8:	c9 99       	sbic	0x19, 1	; 25
  ea:	10 c0       	rjmp	.+32     	; 0x10c <obsluga_delay+0x7a>
			key_lock2 = 500;
  ec:	50 93 63 00 	sts	0x0063, r21	; 0x800063 <__data_end+0x1>
  f0:	40 93 62 00 	sts	0x0062, r20	; 0x800062 <__data_end>
			*mode -= 1;
  f4:	20 81       	ld	r18, Z
  f6:	21 50       	subi	r18, 0x01	; 1
  f8:	20 83       	st	Z, r18
			if(*mode < 0){ *mode = 0; }
  fa:	08 c0       	rjmp	.+16     	; 0x10c <obsluga_delay+0x7a>
		} else if( key_lock2 && (PINA & KEY_PREVIOUS) ) key_lock2--;
  fc:	c9 9b       	sbis	0x19, 1	; 25
  fe:	06 c0       	rjmp	.+12     	; 0x10c <obsluga_delay+0x7a>
 100:	21 50       	subi	r18, 0x01	; 1
 102:	31 09       	sbc	r19, r1
 104:	30 93 63 00 	sts	0x0063, r19	; 0x800063 <__data_end+0x1>
 108:	20 93 62 00 	sts	0x0062, r18	; 0x800062 <__data_end>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 10c:	ad ee       	ldi	r26, 0xED	; 237
 10e:	b0 e0       	ldi	r27, 0x00	; 0
 110:	11 97       	sbiw	r26, 0x01	; 1
 112:	f1 f7       	brne	.-4      	; 0x110 <obsluga_delay+0x7e>
 114:	00 00       	nop
 116:	01 97       	sbiw	r24, 0x01	; 1
    }
}


void obsluga_delay( uint16_t ms, uint8_t *mode) {
	while( ms-- ) {
 118:	19 f6       	brne	.-122    	; 0xa0 <obsluga_delay+0xe>
 11a:	08 95       	ret

0000011c <main>:
void print_to_LCD( const char* message);

uint16_t key_lock1=0, key_lock2=0;
uint16_t delay = 50;

int main(void){
 11c:	cf 93       	push	r28
 11e:	df 93       	push	r29
 120:	1f 92       	push	r1
 122:	cd b7       	in	r28, 0x3d	; 61
 124:	de b7       	in	r29, 0x3e	; 62
	const char* TAB_MODE[5] = {STR1, STR2, STR3, STR4, STR5};
	uint8_t mode = 0;
 126:	19 82       	std	Y+1, r1	; 0x01
	DDRB &= ~KEY_NEXT | ~KEY_PREVIOUS;
 128:	87 b3       	in	r24, 0x17	; 23
 12a:	87 bb       	out	0x17, r24	; 23
	PORTB |= KEY_NEXT | KEY_PREVIOUS;
 12c:	88 b3       	in	r24, 0x18	; 24
 12e:	83 60       	ori	r24, 0x03	; 3
 130:	88 bb       	out	0x18, r24	; 24
	 
    while (1){
		switch (mode) {
 132:	89 81       	ldd	r24, Y+1	; 0x01
 134:	82 30       	cpi	r24, 0x02	; 2
 136:	e9 f0       	breq	.+58     	; 0x172 <main+0x56>
 138:	28 f4       	brcc	.+10     	; 0x144 <main+0x28>
 13a:	88 23       	and	r24, r24
 13c:	41 f0       	breq	.+16     	; 0x14e <main+0x32>
 13e:	81 30       	cpi	r24, 0x01	; 1
 140:	79 f0       	breq	.+30     	; 0x160 <main+0x44>
 142:	f8 cf       	rjmp	.-16     	; 0x134 <main+0x18>
 144:	83 30       	cpi	r24, 0x03	; 3
 146:	f1 f0       	breq	.+60     	; 0x184 <main+0x68>
 148:	84 30       	cpi	r24, 0x04	; 4
 14a:	29 f1       	breq	.+74     	; 0x196 <main+0x7a>
 14c:	f3 cf       	rjmp	.-26     	; 0x134 <main+0x18>
			case 0: {
				print_to_LCD(TAB_MODE[mode]);
			
				obsluga_delay(delay, &mode);
 14e:	be 01       	movw	r22, r28
 150:	6f 5f       	subi	r22, 0xFF	; 255
 152:	7f 4f       	sbci	r23, 0xFF	; 255
 154:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
 158:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__data_start+0x1>
 15c:	0e 94 49 00 	call	0x92	; 0x92 <obsluga_delay>
			}
			case 1:{
				print_to_LCD(TAB_MODE[mode]);
			
				obsluga_delay(delay, &mode);
 160:	be 01       	movw	r22, r28
 162:	6f 5f       	subi	r22, 0xFF	; 255
 164:	7f 4f       	sbci	r23, 0xFF	; 255
 166:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
 16a:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__data_start+0x1>
 16e:	0e 94 49 00 	call	0x92	; 0x92 <obsluga_delay>
			}
			case 2:{
				print_to_LCD(TAB_MODE[mode]);
			
				obsluga_delay(delay, &mode);
 172:	be 01       	movw	r22, r28
 174:	6f 5f       	subi	r22, 0xFF	; 255
 176:	7f 4f       	sbci	r23, 0xFF	; 255
 178:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
 17c:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__data_start+0x1>
 180:	0e 94 49 00 	call	0x92	; 0x92 <obsluga_delay>
			}
			case 3:{
				print_to_LCD(TAB_MODE[mode]);
			
				obsluga_delay(delay, &mode);
 184:	be 01       	movw	r22, r28
 186:	6f 5f       	subi	r22, 0xFF	; 255
 188:	7f 4f       	sbci	r23, 0xFF	; 255
 18a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
 18e:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__data_start+0x1>
 192:	0e 94 49 00 	call	0x92	; 0x92 <obsluga_delay>
			}
			case 4:{
				print_to_LCD(TAB_MODE[mode]);
			
				obsluga_delay(delay, &mode);
 196:	be 01       	movw	r22, r28
 198:	6f 5f       	subi	r22, 0xFF	; 255
 19a:	7f 4f       	sbci	r23, 0xFF	; 255
 19c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
 1a0:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__data_start+0x1>
 1a4:	0e 94 49 00 	call	0x92	; 0x92 <obsluga_delay>
 1a8:	c4 cf       	rjmp	.-120    	; 0x132 <main+0x16>

000001aa <_exit>:
 1aa:	f8 94       	cli

000001ac <__stop_program>:
 1ac:	ff cf       	rjmp	.-2      	; 0x1ac <__stop_program>
