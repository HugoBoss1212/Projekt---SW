
Projekt - SW.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000042e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000030  00800060  0000042e  000004c2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  00800090  00800090  000004f2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000004f2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000524  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c0  00000000  00000000  00000560  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e39  00000000  00000000  00000620  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000803  00000000  00000000  00001459  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007a5  00000000  00000000  00001c5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001cc  00000000  00000000  00002404  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000044f  00000000  00000000  000025d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000698  00000000  00000000  00002a1f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c0  00000000  00000000  000030b7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 c9 01 	jmp	0x392	; 0x392 <__vector_7>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e2       	ldi	r30, 0x2E	; 46
  68:	f4 e0       	ldi	r31, 0x04	; 4
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a0 39       	cpi	r26, 0x90	; 144
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a0 e9       	ldi	r26, 0x90	; 144
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a7 39       	cpi	r26, 0x97	; 151
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 0c 01 	call	0x218	; 0x218 <main>
  8a:	0c 94 15 02 	jmp	0x42a	; 0x42a <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <_LCD_OutNibble>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  92:	80 ff       	sbrs	r24, 0
  94:	02 c0       	rjmp	.+4      	; 0x9a <_LCD_OutNibble+0x8>
  96:	dc 9a       	sbi	0x1b, 4	; 27
  98:	01 c0       	rjmp	.+2      	; 0x9c <_LCD_OutNibble+0xa>
  9a:	dc 98       	cbi	0x1b, 4	; 27
  9c:	81 ff       	sbrs	r24, 1
  9e:	02 c0       	rjmp	.+4      	; 0xa4 <_LCD_OutNibble+0x12>
  a0:	dd 9a       	sbi	0x1b, 5	; 27
  a2:	01 c0       	rjmp	.+2      	; 0xa6 <_LCD_OutNibble+0x14>
  a4:	dd 98       	cbi	0x1b, 5	; 27
  a6:	82 ff       	sbrs	r24, 2
  a8:	02 c0       	rjmp	.+4      	; 0xae <_LCD_OutNibble+0x1c>
  aa:	de 9a       	sbi	0x1b, 6	; 27
  ac:	01 c0       	rjmp	.+2      	; 0xb0 <_LCD_OutNibble+0x1e>
  ae:	de 98       	cbi	0x1b, 6	; 27
  b0:	83 ff       	sbrs	r24, 3
  b2:	02 c0       	rjmp	.+4      	; 0xb8 <_LCD_OutNibble+0x26>
  b4:	df 9a       	sbi	0x1b, 7	; 27
  b6:	08 95       	ret
  b8:	df 98       	cbi	0x1b, 7	; 27
  ba:	08 95       	ret

000000bc <_LCD_Write>:
  bc:	cf 93       	push	r28
  be:	c8 2f       	mov	r28, r24
  c0:	db 9a       	sbi	0x1b, 3	; 27
  c2:	82 95       	swap	r24
  c4:	8f 70       	andi	r24, 0x0F	; 15
  c6:	0e 94 49 00 	call	0x92	; 0x92 <_LCD_OutNibble>
  ca:	db 98       	cbi	0x1b, 3	; 27
  cc:	db 9a       	sbi	0x1b, 3	; 27
  ce:	8c 2f       	mov	r24, r28
  d0:	0e 94 49 00 	call	0x92	; 0x92 <_LCD_OutNibble>
  d4:	db 98       	cbi	0x1b, 3	; 27
  d6:	80 e1       	ldi	r24, 0x10	; 16
  d8:	8a 95       	dec	r24
  da:	f1 f7       	brne	.-4      	; 0xd8 <_LCD_Write+0x1c>
  dc:	00 c0       	rjmp	.+0      	; 0xde <_LCD_Write+0x22>
  de:	cf 91       	pop	r28
  e0:	08 95       	ret

000000e2 <LCD_WriteCommand>:
  e2:	da 98       	cbi	0x1b, 2	; 27
  e4:	0e 94 5e 00 	call	0xbc	; 0xbc <_LCD_Write>
  e8:	08 95       	ret

000000ea <LCD_WriteData>:
  ea:	da 9a       	sbi	0x1b, 2	; 27
  ec:	0e 94 5e 00 	call	0xbc	; 0xbc <_LCD_Write>
  f0:	08 95       	ret

000000f2 <LCD_Clear>:
  f2:	81 e0       	ldi	r24, 0x01	; 1
  f4:	0e 94 71 00 	call	0xe2	; 0xe2 <LCD_WriteCommand>
  f8:	83 ef       	ldi	r24, 0xF3	; 243
  fa:	91 e0       	ldi	r25, 0x01	; 1
  fc:	01 97       	sbiw	r24, 0x01	; 1
  fe:	f1 f7       	brne	.-4      	; 0xfc <LCD_Clear+0xa>
 100:	00 c0       	rjmp	.+0      	; 0x102 <LCD_Clear+0x10>
 102:	00 00       	nop
 104:	08 95       	ret

00000106 <LCD_Initalize>:
//
// Procedura inicjalizacji kontrolera HD44780.
//
//-------------------------------------------------------------------------------------------------
void LCD_Initalize(void)
{
 106:	cf 93       	push	r28
unsigned char i;
LCD_DB4_DIR |= LCD_DB4; // Konfiguracja kierunku pracy wyprowadzeñ
 108:	d4 9a       	sbi	0x1a, 4	; 26
LCD_DB5_DIR |= LCD_DB5; //
 10a:	d5 9a       	sbi	0x1a, 5	; 26
LCD_DB6_DIR |= LCD_DB6; //
 10c:	d6 9a       	sbi	0x1a, 6	; 26
LCD_DB7_DIR |= LCD_DB7; //
 10e:	d7 9a       	sbi	0x1a, 7	; 26
LCD_E_DIR 	|= LCD_E;   //
 110:	d3 9a       	sbi	0x1a, 3	; 26
LCD_RS_DIR 	|= LCD_RS;  //
 112:	d2 9a       	sbi	0x1a, 2	; 26
 114:	85 ea       	ldi	r24, 0xA5	; 165
 116:	9e e0       	ldi	r25, 0x0E	; 14
 118:	01 97       	sbiw	r24, 0x01	; 1
 11a:	f1 f7       	brne	.-4      	; 0x118 <LCD_Initalize+0x12>
 11c:	00 c0       	rjmp	.+0      	; 0x11e <LCD_Initalize+0x18>
 11e:	00 00       	nop
_delay_ms(15); // oczekiwanie na ustalibizowanie siê napiecia zasilajacego
LCD_RS_PORT &= ~LCD_RS; // wyzerowanie linii RS
 120:	da 98       	cbi	0x1b, 2	; 27
LCD_E_PORT &= ~LCD_E;  // wyzerowanie linii E
 122:	db 98       	cbi	0x1b, 3	; 27
 124:	c3 e0       	ldi	r28, 0x03	; 3

for(i = 0; i < 3; i++) // trzykrotne powtórzenie bloku instrukcji
  {
  LCD_E_PORT |= LCD_E; //  E = 1
 126:	db 9a       	sbi	0x1b, 3	; 27
  _LCD_OutNibble(0x03); // tryb 8-bitowy
 128:	83 e0       	ldi	r24, 0x03	; 3
 12a:	0e 94 49 00 	call	0x92	; 0x92 <_LCD_OutNibble>
  LCD_E_PORT &= ~LCD_E; // E = 0
 12e:	db 98       	cbi	0x1b, 3	; 27
 130:	81 ee       	ldi	r24, 0xE1	; 225
 132:	94 e0       	ldi	r25, 0x04	; 4
 134:	01 97       	sbiw	r24, 0x01	; 1
 136:	f1 f7       	brne	.-4      	; 0x134 <LCD_Initalize+0x2e>
 138:	00 c0       	rjmp	.+0      	; 0x13a <LCD_Initalize+0x34>
 13a:	00 00       	nop
 13c:	c1 50       	subi	r28, 0x01	; 1
LCD_RS_DIR 	|= LCD_RS;  //
_delay_ms(15); // oczekiwanie na ustalibizowanie siê napiecia zasilajacego
LCD_RS_PORT &= ~LCD_RS; // wyzerowanie linii RS
LCD_E_PORT &= ~LCD_E;  // wyzerowanie linii E

for(i = 0; i < 3; i++) // trzykrotne powtórzenie bloku instrukcji
 13e:	99 f7       	brne	.-26     	; 0x126 <LCD_Initalize+0x20>
  _LCD_OutNibble(0x03); // tryb 8-bitowy
  LCD_E_PORT &= ~LCD_E; // E = 0
  _delay_ms(5); // czekaj 5ms
  }

LCD_E_PORT |= LCD_E; // E = 1
 140:	db 9a       	sbi	0x1b, 3	; 27
_LCD_OutNibble(0x02); // tryb 4-bitowy
 142:	82 e0       	ldi	r24, 0x02	; 2
 144:	0e 94 49 00 	call	0x92	; 0x92 <_LCD_OutNibble>
LCD_E_PORT &= ~LCD_E; // E = 0
 148:	db 98       	cbi	0x1b, 3	; 27
 14a:	89 ef       	ldi	r24, 0xF9	; 249
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	01 97       	sbiw	r24, 0x01	; 1
 150:	f1 f7       	brne	.-4      	; 0x14e <LCD_Initalize+0x48>
 152:	00 c0       	rjmp	.+0      	; 0x154 <LCD_Initalize+0x4e>
 154:	00 00       	nop

_delay_ms(1); // czekaj 1ms 
LCD_WriteCommand(HD44780_FUNCTION_SET | HD44780_FONT5x7 | HD44780_TWO_LINE | HD44780_4_BIT); // interfejs 4-bity, 2-linie, znak 5x7
 156:	88 e2       	ldi	r24, 0x28	; 40
 158:	0e 94 71 00 	call	0xe2	; 0xe2 <LCD_WriteCommand>
LCD_WriteCommand(HD44780_DISPLAY_ONOFF | HD44780_DISPLAY_OFF); // wy³¹czenie wyswietlacza
 15c:	88 e0       	ldi	r24, 0x08	; 8
 15e:	0e 94 71 00 	call	0xe2	; 0xe2 <LCD_WriteCommand>
LCD_WriteCommand(HD44780_CLEAR); // czyszczenie zawartosæi pamieci DDRAM
 162:	81 e0       	ldi	r24, 0x01	; 1
 164:	0e 94 71 00 	call	0xe2	; 0xe2 <LCD_WriteCommand>
 168:	83 ef       	ldi	r24, 0xF3	; 243
 16a:	91 e0       	ldi	r25, 0x01	; 1
 16c:	01 97       	sbiw	r24, 0x01	; 1
 16e:	f1 f7       	brne	.-4      	; 0x16c <LCD_Initalize+0x66>
 170:	00 c0       	rjmp	.+0      	; 0x172 <LCD_Initalize+0x6c>
 172:	00 00       	nop
_delay_ms(2);
LCD_WriteCommand(HD44780_ENTRY_MODE | HD44780_EM_SHIFT_CURSOR | HD44780_EM_INCREMENT);// inkrementaja adresu i przesuwanie kursora
 174:	86 e0       	ldi	r24, 0x06	; 6
 176:	0e 94 71 00 	call	0xe2	; 0xe2 <LCD_WriteCommand>
LCD_WriteCommand(HD44780_DISPLAY_ONOFF | HD44780_DISPLAY_ON | HD44780_CURSOR_OFF | HD44780_CURSOR_NOBLINK); // w³¹cz LCD, bez kursora i mrugania
 17a:	8c e0       	ldi	r24, 0x0C	; 12
 17c:	0e 94 71 00 	call	0xe2	; 0xe2 <LCD_WriteCommand>
}
 180:	cf 91       	pop	r28
 182:	08 95       	ret

00000184 <obsluga_delay>:
    }
}


void obsluga_delay( uint16_t ms ) {
	while( ms-- ) {
 184:	00 97       	sbiw	r24, 0x00	; 0
 186:	09 f4       	brne	.+2      	; 0x18a <obsluga_delay+0x6>
 188:	46 c0       	rjmp	.+140    	; 0x216 <obsluga_delay+0x92>
		if( !key_lock1 && !(PINA & KEY_NEXT) ) {
			key_lock1 = 500;
 18a:	44 ef       	ldi	r20, 0xF4	; 244
 18c:	51 e0       	ldi	r21, 0x01	; 1
			mode += 1;
			if(mode > 4){ mode = 4; }
 18e:	64 e0       	ldi	r22, 0x04	; 4
}


void obsluga_delay( uint16_t ms ) {
	while( ms-- ) {
		if( !key_lock1 && !(PINA & KEY_NEXT) ) {
 190:	20 91 95 00 	lds	r18, 0x0095	; 0x800095 <key_lock1>
 194:	30 91 96 00 	lds	r19, 0x0096	; 0x800096 <key_lock1+0x1>
 198:	21 15       	cp	r18, r1
 19a:	31 05       	cpc	r19, r1
 19c:	89 f4       	brne	.+34     	; 0x1c0 <obsluga_delay+0x3c>
 19e:	c8 99       	sbic	0x19, 0	; 25
 1a0:	17 c0       	rjmp	.+46     	; 0x1d0 <obsluga_delay+0x4c>
			key_lock1 = 500;
 1a2:	50 93 96 00 	sts	0x0096, r21	; 0x800096 <key_lock1+0x1>
 1a6:	40 93 95 00 	sts	0x0095, r20	; 0x800095 <key_lock1>
			mode += 1;
 1aa:	20 91 90 00 	lds	r18, 0x0090	; 0x800090 <__data_end>
 1ae:	2f 5f       	subi	r18, 0xFF	; 255
			if(mode > 4){ mode = 4; }
 1b0:	25 30       	cpi	r18, 0x05	; 5
 1b2:	18 f4       	brcc	.+6      	; 0x1ba <obsluga_delay+0x36>

void obsluga_delay( uint16_t ms ) {
	while( ms-- ) {
		if( !key_lock1 && !(PINA & KEY_NEXT) ) {
			key_lock1 = 500;
			mode += 1;
 1b4:	20 93 90 00 	sts	0x0090, r18	; 0x800090 <__data_end>
 1b8:	0b c0       	rjmp	.+22     	; 0x1d0 <obsluga_delay+0x4c>
			if(mode > 4){ mode = 4; }
 1ba:	60 93 90 00 	sts	0x0090, r22	; 0x800090 <__data_end>
 1be:	08 c0       	rjmp	.+16     	; 0x1d0 <obsluga_delay+0x4c>
		} else if( key_lock1 && (PINA & KEY_NEXT) ) key_lock1--;
 1c0:	c8 9b       	sbis	0x19, 0	; 25
 1c2:	06 c0       	rjmp	.+12     	; 0x1d0 <obsluga_delay+0x4c>
 1c4:	21 50       	subi	r18, 0x01	; 1
 1c6:	31 09       	sbc	r19, r1
 1c8:	30 93 96 00 	sts	0x0096, r19	; 0x800096 <key_lock1+0x1>
 1cc:	20 93 95 00 	sts	0x0095, r18	; 0x800095 <key_lock1>

		if( !key_lock2 && !(PINA & KEY_PREVIOUS) ) {
 1d0:	20 91 93 00 	lds	r18, 0x0093	; 0x800093 <key_lock2>
 1d4:	30 91 94 00 	lds	r19, 0x0094	; 0x800094 <key_lock2+0x1>
 1d8:	21 15       	cp	r18, r1
 1da:	31 05       	cpc	r19, r1
 1dc:	61 f4       	brne	.+24     	; 0x1f6 <obsluga_delay+0x72>
 1de:	c9 99       	sbic	0x19, 1	; 25
 1e0:	12 c0       	rjmp	.+36     	; 0x206 <obsluga_delay+0x82>
			key_lock2 = 500;
 1e2:	50 93 94 00 	sts	0x0094, r21	; 0x800094 <key_lock2+0x1>
 1e6:	40 93 93 00 	sts	0x0093, r20	; 0x800093 <key_lock2>
			mode -= 1;
 1ea:	20 91 90 00 	lds	r18, 0x0090	; 0x800090 <__data_end>
 1ee:	21 50       	subi	r18, 0x01	; 1
 1f0:	20 93 90 00 	sts	0x0090, r18	; 0x800090 <__data_end>
			if(mode < 0){ mode = 0; }
 1f4:	08 c0       	rjmp	.+16     	; 0x206 <obsluga_delay+0x82>
		} else if( key_lock2 && (PINA & KEY_PREVIOUS) ) key_lock2--;
 1f6:	c9 9b       	sbis	0x19, 1	; 25
 1f8:	06 c0       	rjmp	.+12     	; 0x206 <obsluga_delay+0x82>
 1fa:	21 50       	subi	r18, 0x01	; 1
 1fc:	31 09       	sbc	r19, r1
 1fe:	30 93 94 00 	sts	0x0094, r19	; 0x800094 <key_lock2+0x1>
 202:	20 93 93 00 	sts	0x0093, r18	; 0x800093 <key_lock2>
 206:	ed ee       	ldi	r30, 0xED	; 237
 208:	f0 e0       	ldi	r31, 0x00	; 0
 20a:	31 97       	sbiw	r30, 0x01	; 1
 20c:	f1 f7       	brne	.-4      	; 0x20a <obsluga_delay+0x86>
 20e:	00 00       	nop
 210:	01 97       	sbiw	r24, 0x01	; 1
    }
}


void obsluga_delay( uint16_t ms ) {
	while( ms-- ) {
 212:	09 f0       	breq	.+2      	; 0x216 <obsluga_delay+0x92>
 214:	bd cf       	rjmp	.-134    	; 0x190 <obsluga_delay+0xc>
 216:	08 95       	ret

00000218 <main>:
uint16_t j = 0;
uint8_t mode = 0;

int main(void){
	//key ports init
	DDRB &= ~KEY_NEXT | ~KEY_PREVIOUS;
 218:	87 b3       	in	r24, 0x17	; 23
 21a:	87 bb       	out	0x17, r24	; 23
	PORTB |= KEY_NEXT | KEY_PREVIOUS;
 21c:	88 b3       	in	r24, 0x18	; 24
 21e:	83 60       	ori	r24, 0x03	; 3
 220:	88 bb       	out	0x18, r24	; 24

	//led init
	DDRC |= 0xff;
 222:	84 b3       	in	r24, 0x14	; 20
 224:	8f ef       	ldi	r24, 0xFF	; 255
 226:	84 bb       	out	0x14, r24	; 20
	PORTC |= 0;
 228:	85 b3       	in	r24, 0x15	; 21
 22a:	85 bb       	out	0x15, r24	; 21

	//lcd ports init
	TCCR1B |= 1<<WGM12;
 22c:	8e b5       	in	r24, 0x2e	; 46
 22e:	88 60       	ori	r24, 0x08	; 8
 230:	8e bd       	out	0x2e, r24	; 46
	OCR1A = 4000;
 232:	80 ea       	ldi	r24, 0xA0	; 160
 234:	9f e0       	ldi	r25, 0x0F	; 15
 236:	9b bd       	out	0x2b, r25	; 43
 238:	8a bd       	out	0x2a, r24	; 42
	TCCR1B |=1<<CS10 | 1<< CS12;
 23a:	8e b5       	in	r24, 0x2e	; 46
 23c:	85 60       	ori	r24, 0x05	; 5
 23e:	8e bd       	out	0x2e, r24	; 46
	TIMSK |= 1<<OCIE1A;
 240:	89 b7       	in	r24, 0x39	; 57
 242:	80 61       	ori	r24, 0x10	; 16
 244:	89 bf       	out	0x39, r24	; 57
	LCD_Initalize();
 246:	0e 94 83 00 	call	0x106	; 0x106 <LCD_Initalize>
	sei();
 24a:	78 94       	sei
					obsluga_delay(delay);
				}
			}
			case 1:{
				for (uint8_t i=0; i<8; i++){
					PORTC &= ~(1<<i);
 24c:	01 e0       	ldi	r16, 0x01	; 1
 24e:	10 e0       	ldi	r17, 0x00	; 0
	TIMSK |= 1<<OCIE1A;
	LCD_Initalize();
	sei();
	 
    while (1){
		switch (mode) {
 250:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__data_end>
 254:	82 30       	cpi	r24, 0x02	; 2
 256:	09 f4       	brne	.+2      	; 0x25a <main+0x42>
 258:	82 c0       	rjmp	.+260    	; 0x35e <main+0x146>
 25a:	28 f4       	brcc	.+10     	; 0x266 <main+0x4e>
 25c:	88 23       	and	r24, r24
 25e:	51 f0       	breq	.+20     	; 0x274 <main+0x5c>
 260:	81 30       	cpi	r24, 0x01	; 1
 262:	91 f1       	breq	.+100    	; 0x2c8 <main+0xb0>
 264:	f7 cf       	rjmp	.-18     	; 0x254 <main+0x3c>
 266:	83 30       	cpi	r24, 0x03	; 3
 268:	09 f4       	brne	.+2      	; 0x26c <main+0x54>
 26a:	7f c0       	rjmp	.+254    	; 0x36a <main+0x152>
 26c:	84 30       	cpi	r24, 0x04	; 4
 26e:	09 f4       	brne	.+2      	; 0x272 <main+0x5a>
 270:	82 c0       	rjmp	.+260    	; 0x376 <main+0x15e>
 272:	f0 cf       	rjmp	.-32     	; 0x254 <main+0x3c>
 274:	c0 e0       	ldi	r28, 0x00	; 0
 276:	d0 e0       	ldi	r29, 0x00	; 0
			case 0: {
				for (uint8_t i=0; i<8; i++){
					PORTC &= ~(1<<i);
 278:	95 b3       	in	r25, 0x15	; 21
 27a:	98 01       	movw	r18, r16
 27c:	0c 2e       	mov	r0, r28
 27e:	02 c0       	rjmp	.+4      	; 0x284 <main+0x6c>
 280:	22 0f       	add	r18, r18
 282:	33 1f       	adc	r19, r19
 284:	0a 94       	dec	r0
 286:	e2 f7       	brpl	.-8      	; 0x280 <main+0x68>
 288:	82 2f       	mov	r24, r18
 28a:	80 95       	com	r24
 28c:	89 23       	and	r24, r25
 28e:	85 bb       	out	0x15, r24	; 21
					obsluga_delay(delay);
 290:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
 294:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__data_start+0x1>
 298:	0e 94 c2 00 	call	0x184	; 0x184 <obsluga_delay>
 29c:	21 96       	adiw	r28, 0x01	; 1
	sei();
	 
    while (1){
		switch (mode) {
			case 0: {
				for (uint8_t i=0; i<8; i++){
 29e:	c8 30       	cpi	r28, 0x08	; 8
 2a0:	d1 05       	cpc	r29, r1
 2a2:	51 f7       	brne	.-44     	; 0x278 <main+0x60>
					PORTC &= ~(1<<i);
					obsluga_delay(delay);
				}
				for (int8_t i=8; i>-1; i--){
					PORTC |= (1<<i);
 2a4:	25 b3       	in	r18, 0x15	; 21
 2a6:	c8 01       	movw	r24, r16
 2a8:	0c 2e       	mov	r0, r28
 2aa:	02 c0       	rjmp	.+4      	; 0x2b0 <main+0x98>
 2ac:	88 0f       	add	r24, r24
 2ae:	99 1f       	adc	r25, r25
 2b0:	0a 94       	dec	r0
 2b2:	e2 f7       	brpl	.-8      	; 0x2ac <main+0x94>
 2b4:	82 2b       	or	r24, r18
 2b6:	85 bb       	out	0x15, r24	; 21
					obsluga_delay(delay);
 2b8:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
 2bc:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__data_start+0x1>
 2c0:	0e 94 c2 00 	call	0x184	; 0x184 <obsluga_delay>
 2c4:	21 97       	sbiw	r28, 0x01	; 1
 2c6:	70 f7       	brcc	.-36     	; 0x2a4 <main+0x8c>
	TIMSK |= 1<<OCIE1A;
	LCD_Initalize();
	sei();
	 
    while (1){
		switch (mode) {
 2c8:	d1 e0       	ldi	r29, 0x01	; 1
 2ca:	c0 e0       	ldi	r28, 0x00	; 0
 2cc:	02 c0       	rjmp	.+4      	; 0x2d2 <main+0xba>
 2ce:	cf 5f       	subi	r28, 0xFF	; 255
 2d0:	df 5f       	subi	r29, 0xFF	; 255
					obsluga_delay(delay);
				}
			}
			case 1:{
				for (uint8_t i=0; i<8; i++){
					PORTC &= ~(1<<i);
 2d2:	95 b3       	in	r25, 0x15	; 21
 2d4:	4c 2f       	mov	r20, r28
 2d6:	50 e0       	ldi	r21, 0x00	; 0
 2d8:	98 01       	movw	r18, r16
 2da:	0c 2e       	mov	r0, r28
 2dc:	02 c0       	rjmp	.+4      	; 0x2e2 <main+0xca>
 2de:	22 0f       	add	r18, r18
 2e0:	33 1f       	adc	r19, r19
 2e2:	0a 94       	dec	r0
 2e4:	e2 f7       	brpl	.-8      	; 0x2de <main+0xc6>
 2e6:	82 2f       	mov	r24, r18
 2e8:	80 95       	com	r24
 2ea:	89 23       	and	r24, r25
 2ec:	85 bb       	out	0x15, r24	; 21
					if (i>0){ PORTC |= (1<<(i-1)); }
 2ee:	cc 23       	and	r28, r28
 2f0:	09 f4       	brne	.+2      	; 0x2f4 <main+0xdc>
 2f2:	48 c0       	rjmp	.+144    	; 0x384 <main+0x16c>
 2f4:	25 b3       	in	r18, 0x15	; 21
 2f6:	41 50       	subi	r20, 0x01	; 1
 2f8:	51 09       	sbc	r21, r1
 2fa:	c8 01       	movw	r24, r16
 2fc:	02 c0       	rjmp	.+4      	; 0x302 <main+0xea>
 2fe:	88 0f       	add	r24, r24
 300:	99 1f       	adc	r25, r25
 302:	4a 95       	dec	r20
 304:	e2 f7       	brpl	.-8      	; 0x2fe <main+0xe6>
 306:	82 2b       	or	r24, r18
 308:	85 bb       	out	0x15, r24	; 21
					obsluga_delay(delay);
 30a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
 30e:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__data_start+0x1>
 312:	0e 94 c2 00 	call	0x184	; 0x184 <obsluga_delay>
					PORTC |= (1<<i);
					obsluga_delay(delay);
				}
			}
			case 1:{
				for (uint8_t i=0; i<8; i++){
 316:	d8 30       	cpi	r29, 0x08	; 8
 318:	d0 f2       	brcs	.-76     	; 0x2ce <main+0xb6>
 31a:	c8 e0       	ldi	r28, 0x08	; 8
 31c:	d0 e0       	ldi	r29, 0x00	; 0
					PORTC &= ~(1<<i);
					if (i>0){ PORTC |= (1<<(i-1)); }
					obsluga_delay(delay);
				}
				for (int8_t i=8; i>-1; i--){
					PORTC &= ~(1<<i);
 31e:	95 b3       	in	r25, 0x15	; 21
 320:	98 01       	movw	r18, r16
 322:	0c 2e       	mov	r0, r28
 324:	02 c0       	rjmp	.+4      	; 0x32a <main+0x112>
 326:	22 0f       	add	r18, r18
 328:	33 1f       	adc	r19, r19
 32a:	0a 94       	dec	r0
 32c:	e2 f7       	brpl	.-8      	; 0x326 <main+0x10e>
 32e:	82 2f       	mov	r24, r18
 330:	80 95       	com	r24
 332:	89 23       	and	r24, r25
 334:	85 bb       	out	0x15, r24	; 21
					PORTC |= (1<<(i+1));
 336:	25 b3       	in	r18, 0x15	; 21
 338:	ce 01       	movw	r24, r28
 33a:	01 96       	adiw	r24, 0x01	; 1
 33c:	a8 01       	movw	r20, r16
 33e:	02 c0       	rjmp	.+4      	; 0x344 <main+0x12c>
 340:	44 0f       	add	r20, r20
 342:	55 1f       	adc	r21, r21
 344:	8a 95       	dec	r24
 346:	e2 f7       	brpl	.-8      	; 0x340 <main+0x128>
 348:	ca 01       	movw	r24, r20
 34a:	82 2b       	or	r24, r18
 34c:	85 bb       	out	0x15, r24	; 21
					obsluga_delay(delay);
 34e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
 352:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__data_start+0x1>
 356:	0e 94 c2 00 	call	0x184	; 0x184 <obsluga_delay>
 35a:	21 97       	sbiw	r28, 0x01	; 1
 35c:	00 f7       	brcc	.-64     	; 0x31e <main+0x106>
				}
			}
			case 2:{
				
				obsluga_delay(delay);
 35e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
 362:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__data_start+0x1>
 366:	0e 94 c2 00 	call	0x184	; 0x184 <obsluga_delay>
			}
			case 3:{
			
				obsluga_delay(delay);
 36a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
 36e:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__data_start+0x1>
 372:	0e 94 c2 00 	call	0x184	; 0x184 <obsluga_delay>
			}
			case 4:{
			
				obsluga_delay(delay);
 376:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
 37a:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__data_start+0x1>
 37e:	0e 94 c2 00 	call	0x184	; 0x184 <obsluga_delay>
 382:	66 cf       	rjmp	.-308    	; 0x250 <main+0x38>
			}
			case 1:{
				for (uint8_t i=0; i<8; i++){
					PORTC &= ~(1<<i);
					if (i>0){ PORTC |= (1<<(i-1)); }
					obsluga_delay(delay);
 384:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
 388:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__data_start+0x1>
 38c:	0e 94 c2 00 	call	0x184	; 0x184 <obsluga_delay>
 390:	9e cf       	rjmp	.-196    	; 0x2ce <main+0xb6>

00000392 <__vector_7>:
		} else if( key_lock2 && (PINA & KEY_PREVIOUS) ) key_lock2--;
		_delay_ms(0.95);
	}
}

ISR(TIMER1_COMPA_vect){
 392:	1f 92       	push	r1
 394:	0f 92       	push	r0
 396:	0f b6       	in	r0, 0x3f	; 63
 398:	0f 92       	push	r0
 39a:	11 24       	eor	r1, r1
 39c:	2f 93       	push	r18
 39e:	3f 93       	push	r19
 3a0:	4f 93       	push	r20
 3a2:	5f 93       	push	r21
 3a4:	6f 93       	push	r22
 3a6:	7f 93       	push	r23
 3a8:	8f 93       	push	r24
 3aa:	9f 93       	push	r25
 3ac:	af 93       	push	r26
 3ae:	bf 93       	push	r27
 3b0:	cf 93       	push	r28
 3b2:	df 93       	push	r29
 3b4:	ef 93       	push	r30
 3b6:	ff 93       	push	r31
	LCD_Clear();
 3b8:	0e 94 79 00 	call	0xf2	; 0xf2 <LCD_Clear>
 3bc:	c0 e0       	ldi	r28, 0x00	; 0
 3be:	d0 e0       	ldi	r29, 0x00	; 0
	for(uint8_t i = 0; i < 16; i++){
		LCD_WriteData(TAB_MODE[mode][i+j]);
 3c0:	e0 91 90 00 	lds	r30, 0x0090	; 0x800090 <__data_end>
 3c4:	f0 e0       	ldi	r31, 0x00	; 0
 3c6:	ee 0f       	add	r30, r30
 3c8:	ff 1f       	adc	r31, r31
 3ca:	ee 59       	subi	r30, 0x9E	; 158
 3cc:	ff 4f       	sbci	r31, 0xFF	; 255
 3ce:	01 90       	ld	r0, Z+
 3d0:	f0 81       	ld	r31, Z
 3d2:	e0 2d       	mov	r30, r0
 3d4:	80 91 91 00 	lds	r24, 0x0091	; 0x800091 <j>
 3d8:	90 91 92 00 	lds	r25, 0x0092	; 0x800092 <j+0x1>
 3dc:	e8 0f       	add	r30, r24
 3de:	f9 1f       	adc	r31, r25
 3e0:	ec 0f       	add	r30, r28
 3e2:	fd 1f       	adc	r31, r29
 3e4:	80 81       	ld	r24, Z
 3e6:	0e 94 75 00 	call	0xea	; 0xea <LCD_WriteData>
 3ea:	21 96       	adiw	r28, 0x01	; 1
	}
}

ISR(TIMER1_COMPA_vect){
	LCD_Clear();
	for(uint8_t i = 0; i < 16; i++){
 3ec:	c0 31       	cpi	r28, 0x10	; 16
 3ee:	d1 05       	cpc	r29, r1
 3f0:	39 f7       	brne	.-50     	; 0x3c0 <__vector_7+0x2e>
		LCD_WriteData(TAB_MODE[mode][i+j]);
	}
	j++;
 3f2:	80 91 91 00 	lds	r24, 0x0091	; 0x800091 <j>
 3f6:	90 91 92 00 	lds	r25, 0x0092	; 0x800092 <j+0x1>
 3fa:	01 96       	adiw	r24, 0x01	; 1
 3fc:	90 93 92 00 	sts	0x0092, r25	; 0x800092 <j+0x1>
 400:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <j>
 404:	ff 91       	pop	r31
 406:	ef 91       	pop	r30
 408:	df 91       	pop	r29
 40a:	cf 91       	pop	r28
 40c:	bf 91       	pop	r27
 40e:	af 91       	pop	r26
 410:	9f 91       	pop	r25
 412:	8f 91       	pop	r24
 414:	7f 91       	pop	r23
 416:	6f 91       	pop	r22
 418:	5f 91       	pop	r21
 41a:	4f 91       	pop	r20
 41c:	3f 91       	pop	r19
 41e:	2f 91       	pop	r18
 420:	0f 90       	pop	r0
 422:	0f be       	out	0x3f, r0	; 63
 424:	0f 90       	pop	r0
 426:	1f 90       	pop	r1
 428:	18 95       	reti

0000042a <_exit>:
 42a:	f8 94       	cli

0000042c <__stop_program>:
 42c:	ff cf       	rjmp	.-2      	; 0x42c <__stop_program>
